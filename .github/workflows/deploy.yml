name: Deploy eAssist API

on:
  push:
    branches: [ "main", "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    name: Build and Deploy eAssist API
    runs-on: ubuntu-latest
    if: >-
      ${{ ((github.ref == 'refs/heads/releases' || github.ref == 'refs/heads/main') && github.event_name == 'push')
          || (github.event_name == 'release' && (github.event.release.target_commitish == 'releases' || github.event.release.target_commitish == 'main'))
          || github.event_name == 'workflow_dispatch' }}
    env:
      DEPLOY_PATH: /opt/eassist-api
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository (metadata only)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EASSIST_API_SRV }}

      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Prepare .env artifact (optional)
        if: ${{ secrets.EASSIST_API_ENV != '' }}
        run: |
          cat > eassist-api.env <<'EOF'
          ${{ secrets.EASSIST_API_ENV }}
          EOF
          chmod 600 eassist-api.env

      - name: Upload .env to server (optional)
        if: ${{ secrets.EASSIST_API_ENV != '' }}
        run: |
          REMOTE_ENV="/tmp/eassist-api.env.${GITHUB_RUN_NUMBER}"
          echo "REMOTE_ENV=$REMOTE_ENV" >> "$GITHUB_ENV"
          scp -o BatchMode=yes -o StrictHostKeyChecking=yes eassist-api.env ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }}:"$REMOTE_ENV"

      - name: Remote deploy via systemd script
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF_NAME}"
          REMOTE_ENV_PATH="${REMOTE_ENV:-}"
          REMOTE_CMD=("bash" "~/releases/deploy-eassist-api.sh" "--branch" "$BRANCH")
          if [ -n "$REMOTE_ENV_PATH" ]; then
            REMOTE_CMD=("bash" "~/releases/deploy-eassist-api.sh" "--env" "$REMOTE_ENV_PATH" "--branch" "$BRANCH")
          fi
          echo "Running: ${REMOTE_CMD[*]} on ${{ secrets.DEPLOY_HOST }} as ${{ secrets.DEPLOY_USER || 'gitdeploy' }}"
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }} "${REMOTE_CMD[@]}"

      - name: Post-deploy check (port 8080)
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }} "ss -ltnp | grep -q ':8080 ' && echo 'API listening on 8080' || (echo 'No listener on 8080' && exit 1)"
