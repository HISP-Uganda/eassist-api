name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:

permissions:
  contents: read

# Prevent overlapping deploys
concurrency:
  group: deploy-production
  cancel-in-progress: false

env:
  DEPLOY_PATH: /opt/eassist-api
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST || '194.163.173.144' }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER || 'gitdeploy' }}
  DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || '22' }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: >-
      ${{ github.ref == 'refs/heads/releases' ||
          (github.event_name == 'release' && github.event.release.target_commitish == 'releases') ||
          (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/releases') }}
    env:
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate environment & secrets
        run: |
          set -e
          echo "Branch ref: $GITHUB_REF"
          if [ -z "${{ secrets.EASSIST_API_SRV }}" ]; then
            echo '::error::Missing required secret: EASSIST_API_SRV' >&2
            exit 1
          fi
          if [ ! -f package.json ]; then
            echo '::error::package.json not found at repository root.' >&2
            ls -al
            exit 1
          fi
          if [ ! -f package-lock.json ]; then
            echo '::error::package-lock.json is required for reproducible build (commit it first).'
            exit 1
          fi
          echo "Target: ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PORT} -> ${DEPLOY_PATH}" \
            | sed 's/\(DEPLOY_HOST\|DEPLOY_USER\)/[masked]/g'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Show Node & npm versions
        run: node -v && npm -v && npm config get fund false || true

      - name: Install dependencies (npm ci)
        run: |
          set -e
          npm ci

      - name: Read version
        id: meta
        run: echo "version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      - name: Prepare SSH key
        run: |
          set -e
          mkdir -p ~/.ssh
          printf '%s' "${{ secrets.EASSIST_API_SRV }}" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          eval "$(ssh-agent -s)" >/dev/null
          ssh-add ~/.ssh/id_deploy
          # Known hosts hardening
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          else
            ssh-keyscan -p "$DEPLOY_PORT" -H "$DEPLOY_HOST" > ~/.ssh/known_hosts 2>/dev/null || {
              echo '::warning::Host key scan failed; continuing (may require manual trust).'
            }
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Install rsync
        run: sudo apt-get update -y && sudo apt-get install -y rsync

      - name: Rsync project to server
        run: |
          set -e
          RSYNC_RSH="ssh -p ${DEPLOY_PORT} -o StrictHostKeyChecking=yes"
          # Show a short diff context (what will be sent) - optional
          echo 'Top-level files:'
          ls -1 | head -n 40
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            -e "$RSYNC_RSH" ./ "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PATH}/"

      - name: Remote deploy script
        env:
          BUILD_LABEL: v${{ steps.meta.outputs.version }}+ci.${{ github.run_number }}
        run: |
          set -e
          ssh -p "$DEPLOY_PORT" -o StrictHostKeyChecking=yes \
            "${DEPLOY_USER}@${DEPLOY_HOST}" \
            "EASSIST_BUILD='${BUILD_LABEL}' GIT_SHA='${GIT_SHA}' ${DEPLOY_PATH}/bin/deploy.sh"

      - name: (Optional) Remote smoke test
        continue-on-error: true
        run: |
          set -e
          if ssh -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" "command -v curl >/dev/null"; then
            echo 'Attempting remote health check (port 8080 assumed)...'
            ssh -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" "curl -fsS localhost:8080/health || curl -fsS localhost:8080 || true"
          else
            echo 'curl not available remotely; skipping health probe.'
          fi

      - name: Summary
        run: |
          echo "Deployment complete" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit: $GIT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "Target: ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PORT} -> ${DEPLOY_PATH}" >> $GITHUB_STEP_SUMMARY
          echo "Build Label: v${{ steps.meta.outputs.version }}+ci.${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

      - name: Upload deploy metadata artifact
        uses: actions/upload-artifact@v4
        with:
            name: deploy-metadata
            retention-days: 7
            path: |
              package.json
              package-lock.json
