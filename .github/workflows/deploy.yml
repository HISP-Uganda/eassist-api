name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    name: Build and Deploy eAssist API
    runs-on: ubuntu-latest
    if: >-
      ${{ github.ref == 'refs/heads/releases'
          || (github.event_name == 'release' && github.event.release.target_commitish == 'releases')
          || github.event_name == 'workflow_dispatch' }}
    env:
      DEPLOY_PATH: /opt/eassist-api
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Show Node & npm versions
        run: node -v && npm -v

      - name: Ensure lockfile exists
        run: |
          if [ ! -f package-lock.json ]; then
            echo "::warning::package-lock.json missing. Generating one (consider committing)."
            npm install --package-lock-only
          fi
          grep -m1 'lockfileVersion' package-lock.json || true

      - name: Install dependencies (prefer ci)
        run: |
          set -e
          echo "Installing dependencies with npm ci"
          if ! npm ci; then
            echo "::warning::npm ci failed; falling back to npm install"
            rm -rf node_modules
            npm install
          fi

      - name: Read version
        id: v
        run: echo "version=$(node -e "console.log(require('./package.json').version)")" >> $GITHUB_OUTPUT

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EASSIST_API_SRV }}

      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Rsync files
        run: |
          RSYNC_RSH="ssh -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            ./ \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Remote deploy
        env:
          BUILD_LABEL: v${{ steps.v.outputs.version }}+ci.${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=yes \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }} \
            "echo '[Deploy] Starting deployment at \$(date)'
            cd ${{ env.DEPLOY_PATH }} || { echo '[Deploy] Failed to change to deploy directory'; exit 1; }
            
            echo '[Deploy] Installing dependencies'
            if ! npm ci --only=production --no-audit 2>/dev/null; then
              echo '[Deploy] npm ci failed, trying npm install'
              npm install --only=production --no-audit || { echo '[Deploy] Failed to install dependencies'; exit 1; }
            fi
            
            echo '[Deploy] Running migrations'
            npm run migrate:run 2>/dev/null || npm run migrate 2>/dev/null || echo '[Deploy] No migrations to run or migration failed (continuing)'
            
            echo '[Deploy] Stopping existing service safely'
            # Create a PID file location
            PID_FILE=\"/tmp/eassist-api.pid\"
            
            # Method 1: Try to read existing PID and stop gracefully
            if [ -f \"\$PID_FILE\" ]; then
              OLD_PID=\$(cat \"\$PID_FILE\" 2>/dev/null || echo '')
              if [ -n \"\$OLD_PID\" ] && kill -0 \"\$OLD_PID\" 2>/dev/null; then
                echo '[Deploy] Found running service with PID: '\$OLD_PID
                echo '[Deploy] Stopping gracefully...'
                kill -TERM \"\$OLD_PID\" 2>/dev/null || true
                # Wait for graceful shutdown
                for i in \$(seq 1 10); do
                  if ! kill -0 \"\$OLD_PID\" 2>/dev/null; then
                    echo '[Deploy] Service stopped gracefully'
                    break
                  fi
                  echo '[Deploy] Waiting for graceful shutdown... ('\$i'/10)'
                  sleep 1
                done
                # Force kill if still running
                if kill -0 \"\$OLD_PID\" 2>/dev/null; then
                  echo '[Deploy] Force killing stubborn process'
                  kill -9 \"\$OLD_PID\" 2>/dev/null || true
                fi
              else
                echo '[Deploy] PID file exists but process not running'
              fi
              rm -f \"\$PID_FILE\"
            else
              echo '[Deploy] No PID file found'
            fi
            
            # Method 2: Clean up port 8080 directly (safer than pkill)
            echo '[Deploy] Ensuring port 8080 is free'
            
            # Multiple attempts to clean port 8080
            for cleanup_attempt in \$(seq 1 3); do
              echo '[Deploy] Port cleanup attempt '\$cleanup_attempt'/3'
              
              # Method 2a: Use lsof to find and kill processes
              if command -v lsof >/dev/null 2>&1; then
                PORT_PIDS=\$(lsof -ti:8080 2>/dev/null | head -10)
                if [ -n \"\$PORT_PIDS\" ]; then
                  echo '[Deploy] Found processes on port 8080: '\$PORT_PIDS
                  for pid in \$PORT_PIDS; do
                    if [ -n \"\$pid\" ]; then
                      echo '[Deploy] Killing process '\$pid' (using port 8080)'
                      kill -TERM \"\$pid\" 2>/dev/null || true
                      sleep 1
                      # Immediate force kill if still there
                      if kill -0 \"\$pid\" 2>/dev/null; then
                        echo '[Deploy] Force killing stubborn process '\$pid
                        kill -9 \"\$pid\" 2>/dev/null || true
                      fi
                    fi
                  done
                else
                  echo '[Deploy] No processes found on port 8080 via lsof'
                fi
              fi
              
              # Method 2b: Use fuser for additional cleanup
              if command -v fuser >/dev/null 2>&1; then
                echo '[Deploy] Using fuser to clean port 8080'
                fuser -k 8080/tcp 2>/dev/null || true
                sleep 1
                # Force kill with fuser
                fuser -9 -k 8080/tcp 2>/dev/null || true
                sleep 1
              fi
              
              # Method 2c: Use netstat + ps to find processes (fallback)
              if command -v netstat >/dev/null 2>&1 && command -v awk >/dev/null 2>&1; then
                NETSTAT_PIDS=\$(netstat -tulpn 2>/dev/null | grep ':8080 ' | awk '{print \$7}' | cut -d'/' -f1 | grep -v '^-\$' | head -5)
                if [ -n \"\$NETSTAT_PIDS\" ]; then
                  echo '[Deploy] Found processes via netstat: '\$NETSTAT_PIDS
                  for pid in \$NETSTAT_PIDS; do
                    if [ -n \"\$pid\" ] && [ \"\$pid\" != \"-\" ]; then
                      echo '[Deploy] Killing netstat-found PID: '\$pid
                      kill -TERM \"\$pid\" 2>/dev/null || true
                      sleep 1
                      kill -9 \"\$pid\" 2>/dev/null || true
                    fi
                  done
                fi
              fi
              
              # Check if port is now free
              sleep 2
              if command -v lsof >/dev/null 2>&1; then
                if ! lsof -ti:8080 >/dev/null 2>&1; then
                  echo '[Deploy] Port 8080 successfully freed after attempt '\$cleanup_attempt
                  break
                else
                  echo '[Deploy] Port 8080 still in use after attempt '\$cleanup_attempt
                  if [ \$cleanup_attempt -eq 3 ]; then
                    echo '[Deploy] Final attempt - showing what is using port 8080:'
                    lsof -i:8080 2>/dev/null || true
                    netstat -tulpn 2>/dev/null | grep 8080 || true
                  fi
                fi
              elif command -v netstat >/dev/null 2>&1; then
                if ! netstat -ln 2>/dev/null | grep -q ':8080.*LISTEN'; then
                  echo '[Deploy] Port 8080 freed (verified via netstat)'
                  break
                fi
              fi
            done
            
            echo '[Deploy] Waiting for complete cleanup'
            sleep 5
            
            # Final verification with extended wait
            if command -v lsof >/dev/null 2>&1 && lsof -ti:8080 >/dev/null 2>&1; then
              echo '[Deploy] WARNING: Port 8080 still occupied, but continuing'
              lsof -i:8080 2>/dev/null || true
            else
              echo '[Deploy] Port 8080 is free and ready'
            fi
            
            echo '[Deploy] Starting new service'
            # Ensure log directory exists
            LOG_DIR=\"\$HOME/logs\"
            mkdir -p \"\$LOG_DIR\" 2>/dev/null || {
              LOG_DIR=\"/tmp/eassist-logs\"
              mkdir -p \"\$LOG_DIR\" 2>/dev/null || LOG_DIR=\"/tmp\"
            }
            LOG_FILE=\"\$LOG_DIR/eassist-api.out\"
            
            echo '[Deploy] Comprehensive port liberation before service start'
            # More aggressive port clearing with OS-level wait
            for liberation_attempt in \$(seq 1 10); do
              echo '[Deploy] Port liberation attempt '\$liberation_attempt'/10'
              
              # Kill anything on port 8080 with all available methods
              if command -v lsof >/dev/null 2>&1; then
                ALL_PIDS=\$(lsof -ti:8080 2>/dev/null)
                if [ -n \"\$ALL_PIDS\" ]; then
                  echo '[Deploy] Eliminating PIDs on 8080: '\$ALL_PIDS
                  echo \"\$ALL_PIDS\" | xargs -r kill -9 2>/dev/null || true
                fi
              fi
              
              # Use fuser with maximum aggression
              if command -v fuser >/dev/null 2>&1; then
                fuser -k -9 8080/tcp 2>/dev/null || true
              fi
              
              # Use ss command if available (more modern than netstat)
              if command -v ss >/dev/null 2>&1; then
                SS_PIDS=\$(ss -tulpn | grep :8080 | awk '{print \$6}' | cut -d',' -f2 | cut -d'=' -f2 2>/dev/null || true)
                if [ -n \"\$SS_PIDS\" ]; then
                  echo '[Deploy] SS found PIDs: '\$SS_PIDS
                  echo \"\$SS_PIDS\" | xargs -r kill -9 2>/dev/null || true
                fi
              fi
              
              # Wait for OS to completely release the port
              sleep 1
              
              # Test if we can actually bind to the port
              echo '[Deploy] Testing port 8080 availability'
              if command -v python3 >/dev/null 2>&1; then
                PORT_TEST=\$(python3 -c \"
import socket
import sys
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(('', 8080))
    s.close()
    print('PORT_FREE')
except Exception as e:
    print('PORT_BUSY')
    sys.exit(1)
\" 2>/dev/null || echo 'PORT_BUSY')
                
                if [ \"\$PORT_TEST\" = \"PORT_FREE\" ]; then
                  echo '[Deploy] ✅ Port 8080 is bindable - proceeding with service start'
                  break
                else
                  echo '[Deploy] ❌ Port 8080 still not bindable, attempt '\$liberation_attempt'/10'
                fi
              else
                # Fallback test using nc
                if command -v nc >/dev/null 2>&1; then
                  if nc -z localhost 8080 2>/dev/null; then
                    echo '[Deploy] Port 8080 still responding, attempt '\$liberation_attempt'/10'
                  else
                    echo '[Deploy] ✅ Port 8080 not responding - proceeding'
                    break
                  fi
                else
                  # Final fallback - just wait longer
                  echo '[Deploy] No port test available, waiting longer'
                  sleep 2
                  break
                fi
              fi
              
              if [ \$liberation_attempt -eq 10 ]; then
                echo '[Deploy] ⚠️  Port liberation failed after 10 attempts, trying anyway'
              fi
            done
            
            echo '[Deploy] Starting service with retry logic (log: '\$LOG_FILE')'
            cd ${{ env.DEPLOY_PATH }}
            
            # Try starting the service with multiple attempts
            SERVICE_STARTED=0
            for start_attempt in \$(seq 1 3); do
              echo '[Deploy] Service start attempt '\$start_attempt'/3'
              
              # Start service and capture PID properly
              NODE_ENV=production PORT=8080 nohup npm start >\"\$LOG_FILE\" 2>&1 &
              NEW_PID=\$!
              
              # Give it a moment to start or fail
              sleep 3
              
              # Check if the process is still running
              if kill -0 \"\$NEW_PID\" 2>/dev/null; then
                echo '[Deploy] ✅ Service process is running with PID: '\$NEW_PID
                
                # Save PID for next deployment
                echo \$NEW_PID > \"\$PID_FILE\"
                echo '[Deploy] PID saved to '\$PID_FILE
                SERVICE_STARTED=1
                break
              else
                echo '[Deploy] ❌ Service start attempt '\$start_attempt' failed'
                echo '[Deploy] Log from failed attempt:'
                tail -20 \"\$LOG_FILE\" 2>/dev/null || echo 'No logs available'
                
                if [ \$start_attempt -lt 3 ]; then
                  echo '[Deploy] Waiting 5 seconds before retry'
                  sleep 5
                  # Additional port cleanup before retry
                  if command -v fuser >/dev/null 2>&1; then
                    fuser -k -9 8080/tcp 2>/dev/null || true
                  fi
                fi
              fi
            done
            
            # Final verification
            if [ \$SERVICE_STARTED -eq 0 ]; then
              echo '[Deploy] ERROR: Service failed to start after 3 attempts'
              echo '[Deploy] Final log output:'
              tail -50 \"\$LOG_FILE\" 2>/dev/null || echo 'No logs available'
              echo '[Deploy] Final port diagnostics:'
              lsof -i:8080 2>/dev/null || echo 'No lsof results for port 8080'
              netstat -tulpn 2>/dev/null | grep 8080 || echo 'No netstat results for 8080'
              if command -v ss >/dev/null 2>&1; then
                ss -tulpn | grep 8080 || echo 'No ss results for 8080'
              fi
              rm -f \"\$PID_FILE\"
              exit 1
            fi
            
            echo '[Deploy] Verifying service is ready'
            READY=0
            for attempt in \$(seq 1 30); do
              # Check if port is listening
              if command -v nc >/dev/null 2>&1 && nc -z localhost 8080 2>/dev/null; then
                echo '[Deploy] ✅ Service is responding on port 8080'
                READY=1
                break
              elif command -v lsof >/dev/null 2>&1 && lsof -ti:8080 >/dev/null 2>&1; then
                echo '[Deploy] ✅ Service is listening on port 8080'
                READY=1
                break
              elif command -v netstat >/dev/null 2>&1 && netstat -ln | grep -q ':8080.*LISTEN'; then
                echo '[Deploy] ✅ Service detected via netstat'
                READY=1
                break
              fi
              
              # Verify our process is still alive
              if ! kill -0 \"\$NEW_PID\" 2>/dev/null; then
                echo '[Deploy] ERROR: Service process died during startup'
                echo '[Deploy] Recent logs:'
                tail -30 \"\$LOG_FILE\" 2>/dev/null || echo 'No logs available'
                rm -f \"\$PID_FILE\"
                exit 1
              fi
              
              echo '[Deploy] Waiting for service... ('\$attempt'/30)'
              sleep 2
            done
            
            if [ \"\$READY\" = \"1\" ]; then
              echo '[Deploy] ✅ Deployment successful at \$(date)'
              echo '[Deploy] Service PID: '\$NEW_PID
              echo '[Deploy] PID file: '\$PID_FILE
              echo '[Deploy] Log file: '\$LOG_FILE
              echo '[Deploy] Service should be available shortly'
            else
              echo '[Deploy] ❌ Service startup timeout after 60 seconds'
              echo '[Deploy] Process info:'
              ps aux | grep \"\$NEW_PID\" 2>/dev/null || echo 'Process not found'
              echo '[Deploy] Port check:'
              netstat -ln | grep 8080 || echo 'Port 8080 not found in netstat'
              echo '[Deploy] Recent logs:'
              tail -50 \"\$LOG_FILE\" 2>/dev/null || echo 'No logs available'
              rm -f \"\$PID_FILE\"
              exit 1
            fi"
