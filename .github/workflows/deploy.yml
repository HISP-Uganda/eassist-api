name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    name: Build and Deploy eAssist API
    runs-on: ubuntu-latest
    if: >-
      ${{ github.ref == 'refs/heads/releases'
          || (github.event_name == 'release' && github.event.release.target_commitish == 'releases')
          || github.event_name == 'workflow_dispatch' }}
    env:
      DEPLOY_PATH: /opt/eassist-api
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Show Node & npm versions
        run: node -v && npm -v

      - name: Ensure lockfile exists
        run: |
          if [ ! -f package-lock.json ]; then
            echo "::warning::package-lock.json missing. Generating one (consider committing)."
            npm install --package-lock-only
          fi
          grep -m1 'lockfileVersion' package-lock.json || true

      - name: Install dependencies (prefer ci)
        run: |
          set -e
          echo "Installing dependencies with npm ci"
          if ! npm ci; then
            echo "::warning::npm ci failed; falling back to npm install"
            rm -rf node_modules
            npm install
          fi

      - name: Read version
        id: v
        run: echo "version=$(node -e "console.log(require('./package.json').version)")" >> $GITHUB_OUTPUT

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EASSIST_API_SRV }}

      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Rsync files
        run: |
          RSYNC_RSH="ssh -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            ./ \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Remote deploy
        env:
          BUILD_LABEL: v${{ steps.v.outputs.version }}+ci.${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=yes \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }} \
            "echo '[Deploy] Starting deployment at \$(date)'
            cd ${{ env.DEPLOY_PATH }} || { echo '[Deploy] Failed to change to deploy directory'; exit 1; }
            
            echo '[Deploy] Installing dependencies'
            if ! npm ci --only=production --no-audit 2>/dev/null; then
              echo '[Deploy] npm ci failed, trying npm install'
              npm install --only=production --no-audit || { echo '[Deploy] Failed to install dependencies'; exit 1; }
            fi
            
            echo '[Deploy] Running migrations'
            npm run migrate:run 2>/dev/null || npm run migrate 2>/dev/null || echo '[Deploy] No migrations to run or migration failed (continuing)'
            
            echo '[Deploy] Stopping existing processes safely'
            # Stop node processes more carefully to avoid SSH session termination
            NODE_PIDS=\$(pgrep -f 'node.*server.js' 2>/dev/null || true)
            if [ -n \"\$NODE_PIDS\" ]; then
              echo '[Deploy] Found node server processes, stopping gracefully...'
              for pid in \$NODE_PIDS; do
                if [ -n \"\$pid\" ] && [ \"\$pid\" != \"\$\$\" ]; then
                  echo '[Deploy] Stopping PID: '\$pid
                  kill -TERM \"\$pid\" 2>/dev/null || true
                fi
              done
              sleep 3
              # Force kill if still running - continue even if this fails
              REMAINING=\$(pgrep -f 'node.*server.js' 2>/dev/null || true)
              if [ -n \"\$REMAINING\" ]; then
                echo '[Deploy] Force killing remaining node processes'
                for pid in \$REMAINING; do
                  kill -9 \"\$pid\" 2>/dev/null || true
                done
              fi
              echo '[Deploy] Node process cleanup completed'
            else
              echo '[Deploy] No existing node processes found'
            fi
            
            # Stop npm processes
            NPM_PIDS=\$(pgrep -f 'npm.*start' 2>/dev/null || true)
            if [ -n \"\$NPM_PIDS\" ]; then
              echo '[Deploy] Found npm start processes, stopping...'
              for pid in \$NPM_PIDS; do
                if [ -n \"\$pid\" ] && [ \"\$pid\" != \"\$\$\" ]; then
                  echo '[Deploy] Stopping npm PID: '\$pid
                  kill -TERM \"\$pid\" 2>/dev/null || true
                fi
              done
              sleep 2
              # Force kill remaining npm processes - continue even if this fails
              REMAINING_NPM=\$(pgrep -f 'npm.*start' 2>/dev/null || true)
              if [ -n \"\$REMAINING_NPM\" ]; then
                echo '[Deploy] Force killing remaining npm processes'
                for pid in \$REMAINING_NPM; do
                  kill -9 \"\$pid\" 2>/dev/null || true
                done
              fi
              echo '[Deploy] NPM process cleanup completed'
            else
              echo '[Deploy] No existing npm processes found'
            fi
            
            # Free port 8080 if occupied
            if command -v lsof >/dev/null 2>&1; then
              PORT_PIDS=\$(lsof -ti:8080 2>/dev/null || true)
              if [ -n \"\$PORT_PIDS\" ]; then
                echo '[Deploy] Freeing port 8080'
                for pid in \$PORT_PIDS; do
                  if [ -n \"\$pid\" ] && [ \"\$pid\" != \"\$\$\" ]; then
                    kill -TERM \"\$pid\" 2>/dev/null || true
                    sleep 1
                    kill -9 \"\$pid\" 2>/dev/null || true
                  fi
                done
                echo '[Deploy] Port cleanup completed'
              else
                echo '[Deploy] Port 8080 not in use'
              fi
            fi
            
            echo '[Deploy] Waiting for cleanup to complete'
            sleep 3
            
            # Final port check
            if command -v lsof >/dev/null 2>&1 && lsof -ti:8080 >/dev/null 2>&1; then
              echo '[Deploy] WARNING: Port 8080 still in use, but continuing...'
              lsof -i:8080 2>/dev/null || true
            else
              echo '[Deploy] Port 8080 is available'
            fi
            
            echo '[Deploy] Starting new service'
            # Ensure log directory exists
            if [ -w \"\$HOME\" ]; then
              LOG_DIR=\"\$HOME/logs\"
              mkdir -p \"\$LOG_DIR\" 2>/dev/null || LOG_DIR=\"/tmp/eassist-logs\"
            else
              LOG_DIR=\"/tmp/eassist-logs\"
            fi
            mkdir -p \"\$LOG_DIR\" 2>/dev/null || LOG_DIR=\"/tmp\"
            LOG_FILE=\"\$LOG_DIR/eassist-api.out\"
            
            echo '[Deploy] Starting service in background (log: '\$LOG_FILE')'
            cd ${{ env.DEPLOY_PATH }} || { echo '[Deploy] Failed to change directory'; exit 1; }
            
            # Start the service
            NODE_ENV=production PORT=8080 nohup npm start >\"\$LOG_FILE\" 2>&1 &
            NEW_PID=\$!
            echo '[Deploy] Started new process with PID: '\$NEW_PID
            
            # Verify the process started
            sleep 3
            if ! kill -0 \"\$NEW_PID\" 2>/dev/null; then
              echo '[Deploy] ERROR: New process failed to start'
              echo '[Deploy] Recent log output:'
              tail -20 \"\$LOG_FILE\" 2>/dev/null || echo 'No log output available'
              exit 1
            fi
            
            echo '[Deploy] Waiting for service to be ready...'
            READY=0
            for i in \$(seq 1 30); do
              if command -v lsof >/dev/null 2>&1 && lsof -ti:8080 >/dev/null 2>&1; then
                ACTIVE_PID=\$(lsof -ti:8080 2>/dev/null | head -1)
                echo '[Deploy] ✅ Service is listening on port 8080 (PID: '\$ACTIVE_PID')'
                READY=1
                break
              elif command -v netstat >/dev/null 2>&1 && netstat -ln 2>/dev/null | grep -q ':8080.*LISTEN'; then
                echo '[Deploy] ✅ Service is listening on port 8080 (detected via netstat)'
                READY=1
                break
              fi
              
              # Check if our process is still running
              if ! kill -0 \"\$NEW_PID\" 2>/dev/null; then
                echo '[Deploy] ERROR: Process '\$NEW_PID' died during startup'
                echo '[Deploy] Recent log output:'
                tail -20 \"\$LOG_FILE\" 2>/dev/null || echo 'No log output available'
                exit 1
              fi
              
              echo '[Deploy] Waiting for service startup... ('\$i'/30)'
              sleep 2
            done
            
            if [ \"\$READY\" = \"1\" ]; then
              echo '[Deploy] ✅ Deployment completed successfully at \$(date)'
              echo '[Deploy] Service PID: '\$NEW_PID
              echo '[Deploy] Log file: '\$LOG_FILE
            else
              echo '[Deploy] ❌ Service startup timeout'
              echo '[Deploy] Process status:'
              ps aux | grep \"\$NEW_PID\" || echo 'Process not found in ps output'
              echo '[Deploy] Recent log output:'
              tail -30 \"\$LOG_FILE\" 2>/dev/null || echo 'No log output available'
              exit 1
            fi"
