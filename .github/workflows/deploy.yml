name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    name: Build and Deploy eAssist API
    runs-on: ubuntu-latest
    if: >-
      ${{ (github.ref == 'refs/heads/releases' && github.event_name == 'push')
          || (github.event_name == 'release' && github.event.release.target_commitish == 'releases')
          || github.event_name == 'workflow_dispatch' }}
    env:
      DEPLOY_PATH: /opt/eassist-api
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Show Node & npm versions
        run: node -v && npm -v

      - name: Ensure lockfile exists
        run: |
          if [ ! -f package-lock.json ]; then
            echo "::warning::package-lock.json missing. Generating one (consider committing)."
            npm install --package-lock-only
          fi
          grep -m1 'lockfileVersion' package-lock.json || true

      - name: Install dependencies (prefer ci)
        run: |
          set -e
          echo "Installing dependencies with npm ci"
          if ! npm ci; then
            echo "::warning::npm ci failed; falling back to npm install"
            rm -rf node_modules
            npm install
          fi

      - name: Read version
        id: v
        run: echo "version=$(node -e "console.log(require('./package.json').version)")" >> $GITHUB_OUTPUT

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EASSIST_API_SRV }}

      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Rsync files
        run: |
          RSYNC_RSH="ssh -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            ./ \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Remote deploy
        env:
          BUILD_LABEL: v${{ steps.v.outputs.version }}+ci.${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=yes \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }} \
            "set -euo pipefail
            echo '[GitHub Actions] Starting direct deployment bypass at \$(date)'
            echo '[GitHub Actions] Bypassing any local deploy scripts'
            cd ${{ env.DEPLOY_PATH }} || { echo '[GitHub Actions] Failed to change to deploy directory'; exit 1; }
            
            # Ensure we don't accidentally call the deploy script
            export PATH=\"/usr/bin:/bin:/usr/local/bin:\$PATH\"
            
            echo '[GitHub Actions] Installing dependencies'
            if ! npm ci --only=production --no-audit 2>/dev/null; then
              echo '[GitHub Actions] npm ci failed, trying npm install'
              npm install --only=production --no-audit || { echo '[GitHub Actions] Failed to install dependencies'; exit 1; }
            fi
            
            echo '[GitHub Actions] Running migrations'
            npm run migrate:run 2>/dev/null || npm run migrate 2>/dev/null || echo '[GitHub Actions] No migrations to run or migration failed (continuing)'
            
            echo '[GitHub Actions] Starting PID-based service management'
            PID_FILE=\"\$HOME/.eassist-api.pid\"
            
            # Stop service using PID file
            if [ -f \"\$PID_FILE\" ]; then
              OLD_PID=\$(cat \"\$PID_FILE\" 2>/dev/null || echo '')
              if [ -n \"\$OLD_PID\" ] && kill -0 \"\$OLD_PID\" 2>/dev/null; then
                echo '[GitHub Actions] Stopping existing service with PID: '\$OLD_PID
                kill -TERM \"\$OLD_PID\" 2>/dev/null || true
                sleep 3
                # Force kill if still running
                if kill -0 \"\$OLD_PID\" 2>/dev/null; then
                  echo '[GitHub Actions] Force killing process: '\$OLD_PID
                  kill -9 \"\$OLD_PID\" 2>/dev/null || true
                fi
              fi
              rm -f \"\$PID_FILE\"
            fi
            
            # Additional cleanup - kill any remaining processes
            echo '[GitHub Actions] Cleaning up any remaining processes'
            # Temporarily disable strict error handling for cleanup
            set +e
            
            if command -v pgrep >/dev/null 2>&1; then
              # Kill node processes running server.js
              NODE_PIDS=$(pgrep -f 'node.*server.js' 2>/dev/null || true)
              if [ -n "$NODE_PIDS" ]; then
                echo '[GitHub Actions] Found node processes: '$NODE_PIDS
                for pid in $NODE_PIDS; do
                  if [ -n "$pid" ] && [ "$pid" -gt 0 ] 2>/dev/null; then
                    if kill -0 "$pid" 2>/dev/null; then
                      echo '[GitHub Actions] Killing node process: '$pid
                      if kill -TERM "$pid" 2>/dev/null; then
                        echo '[GitHub Actions] Successfully sent TERM signal to '$pid
                      else
                        echo '[GitHub Actions] Failed to send TERM signal to '$pid' (process may have exited)'
                      fi
                    else
                      echo '[GitHub Actions] Process '$pid' already terminated'
                    fi
                  fi
                done
                
                # Wait a moment for graceful termination
                sleep 3
                
                # Force kill any remaining processes
                for pid in $NODE_PIDS; do
                  if [ -n "$pid" ] && [ "$pid" -gt 0 ] 2>/dev/null; then
                    if kill -0 "$pid" 2>/dev/null; then
                      echo '[GitHub Actions] Force killing stubborn node process: '$pid
                      if kill -9 "$pid" 2>/dev/null; then
                        echo '[GitHub Actions] Successfully force killed '$pid
                      else
                        echo '[GitHub Actions] Could not force kill process '$pid' (may have already exited)'
                      fi
                    fi
                  fi
                done
              else
                echo '[GitHub Actions] No node server processes found'
              fi
              
              # Kill npm start processes
              NPM_PIDS=$(pgrep -f 'npm.*start' 2>/dev/null || true)
              if [ -n "$NPM_PIDS" ]; then
                echo '[GitHub Actions] Found npm processes: '$NPM_PIDS
                for pid in $NPM_PIDS; do
                  if [ -n "$pid" ] && [ "$pid" -gt 0 ] 2>/dev/null; then
                    if kill -0 "$pid" 2>/dev/null; then
                      echo '[GitHub Actions] Killing npm process: '$pid
                      if kill -TERM "$pid" 2>/dev/null; then
                        echo '[GitHub Actions] Successfully sent TERM signal to npm process '$pid
                      else
                        echo '[GitHub Actions] Failed to send TERM signal to npm process '$pid
                      fi
                    else
                      echo '[GitHub Actions] NPM process '$pid' already terminated'
                    fi
                  fi
                done
                
                sleep 2
                
                # Force kill any remaining npm processes
                for pid in $NPM_PIDS; do
                  if [ -n "$pid" ] && [ "$pid" -gt 0 ] 2>/dev/null; then
                    if kill -0 "$pid" 2>/dev/null; then
                      echo '[GitHub Actions] Force killing stubborn npm process: '$pid
                      if kill -9 "$pid" 2>/dev/null; then
                        echo '[GitHub Actions] Successfully force killed npm process '$pid
                      else
                        echo '[GitHub Actions] Could not force kill npm process '$pid
                      fi
                    fi
                  fi
                done
              else
                echo '[GitHub Actions] No npm start processes found'
              fi
            else
              echo '[GitHub Actions] pgrep command not available, skipping process cleanup'
            fi
            
            # Comprehensive port 8080 cleanup  
            echo '[GitHub Actions] Comprehensive port 8080 cleanup'
            set +e  # Disable strict error handling for cleanup
            
            # First, check what's using port 8080
            if command -v lsof >/dev/null 2>&1; then
              echo '[GitHub Actions] Checking processes using port 8080:'
              lsof -i:8080 2>/dev/null && echo '[GitHub Actions] Found processes above' || echo '[GitHub Actions] No processes found using lsof'
              
              # Get PIDs using port 8080
              PORT_PIDS=\$(lsof -ti:8080 2>/dev/null)
              if [ -n \"\$PORT_PIDS\" ]; then
                echo '[GitHub Actions] Killing processes on port 8080: '\$PORT_PIDS
                # Kill each PID
                echo \"\$PORT_PIDS\" | while read -r pid; do
                  if [ -n \"\$pid\" ]; then
                    echo '[GitHub Actions] Killing PID: '\$pid
                    kill -9 \"\$pid\" 2>/dev/null || echo '[GitHub Actions] Could not kill '\$pid
                  fi
                done
                sleep 3
              fi
            fi
            
            # Alternative cleanup using netstat/ss
            if command -v ss >/dev/null 2>&1; then
              echo '[GitHub Actions] Using ss to find port 8080 processes:'
              SS_OUTPUT=\$(ss -tlnp 2>/dev/null | grep :8080)
              if [ -n \"\$SS_OUTPUT\" ]; then
                echo '[GitHub Actions] SS output: '\$SS_OUTPUT
                # Extract PIDs from ss output
                echo \"\$SS_OUTPUT\" | grep -o 'pid=[0-9]*' | cut -d= -f2 | while read -r pid; do
                  if [ -n \"\$pid\" ]; then
                    echo '[GitHub Actions] Killing PID from ss: '\$pid
                    kill -9 \"\$pid\" 2>/dev/null || echo '[GitHub Actions] Could not kill '\$pid
                  fi
                done
                sleep 2
              fi
            fi
            
            # Final aggressive cleanup - kill any process listening on 8080
            if command -v fuser >/dev/null 2>&1; then
              echo '[GitHub Actions] Using fuser to kill port 8080 processes'
              fuser -k 8080/tcp 2>/dev/null || echo '[GitHub Actions] fuser found no processes'
              sleep 2
            fi
            
            # Wait and verify port is free
            sleep 3
            echo '[GitHub Actions] Verifying port 8080 is free'
            if command -v lsof >/dev/null 2>&1; then
              REMAINING=\$(lsof -ti:8080 2>/dev/null)
              if [ -n \"\$REMAINING\" ]; then
                echo '[GitHub Actions] WARNING: Processes still using port 8080: '\$REMAINING
                echo '[GitHub Actions] Final emergency cleanup...'
                echo \"\$REMAINING\" | while read -r pid; do
                  [ -n \"\$pid\" ] && kill -9 \"\$pid\" 2>/dev/null
                done
                sleep 3
              else
                echo '[GitHub Actions] Port 8080 is now free'
              fi
            fi
            
            set -euo pipefail  # Re-enable strict error handling
            
            echo '[GitHub Actions] Process cleanup completed'
            
            # Wait for processes to fully terminate and port to be released
            sleep 5
            
            # Final port verification
            echo '[GitHub Actions] Final port verification'
            if command -v lsof >/dev/null 2>&1; then
              FINAL_CHECK=$(lsof -ti:8080 2>/dev/null || true)
              if [ -n "$FINAL_CHECK" ]; then
                echo '[GitHub Actions] WARNING: Port 8080 still in use by: '$FINAL_CHECK
                lsof -i:8080 2>/dev/null || true
                echo '[GitHub Actions] Attempting emergency cleanup...'
                for pid in $FINAL_CHECK; do
                  [ -n "$pid" ] && kill -9 "$pid" 2>/dev/null || true
                done
                sleep 3
              else
                echo '[GitHub Actions] Port 8080 is now free'
              fi
            fi
            
            echo '[GitHub Actions] Starting new service without systemd'
            # Create log directory
            LOG_DIR=\"\$HOME/logs\"
            mkdir -p \"\$LOG_DIR\" 2>/dev/null || LOG_DIR=\"/tmp\"
            LOG_FILE=\"\$LOG_DIR/eassist-api.log\"
            
            # Start the service in background
            cd ${{ env.DEPLOY_PATH }}
            NODE_ENV=production PORT=8080 nohup npm start >\"\$LOG_FILE\" 2>&1 &
            NEW_PID=\$!
            
            # Save PID for future deployments
            echo \$NEW_PID > \"\$PID_FILE\"
            echo '[GitHub Actions] Started service with PID: '\$NEW_PID
            echo '[GitHub Actions] Log file: '\$LOG_FILE
            
            # Wait and verify service started
            sleep 5
            if ! kill -0 \"\$NEW_PID\" 2>/dev/null; then
              echo '[GitHub Actions] ERROR: Service failed to start'
              echo '[GitHub Actions] Recent logs:'
              tail -20 \"\$LOG_FILE\" 2>/dev/null || echo 'No logs available'
              exit 1
            fi
            
            # Verify service is listening on port 8080
            echo '[GitHub Actions] Verifying service is ready'
            READY=0
            for attempt in \$(seq 1 30); do
              if command -v nc >/dev/null 2>&1 && nc -z localhost 8080 2>/dev/null; then
                echo '[GitHub Actions] ✅ Service is responding on port 8080'
                READY=1
                break
              elif command -v lsof >/dev/null 2>&1 && lsof -ti:8080 >/dev/null 2>&1; then
                echo '[GitHub Actions] ✅ Service is listening on port 8080'
                READY=1
                break
              fi
              
              # Check if process is still alive
              if ! kill -0 \"\$NEW_PID\" 2>/dev/null; then
                echo '[GitHub Actions] ERROR: Service process died during startup'
                tail -30 \"\$LOG_FILE\" 2>/dev/null || echo 'No logs available'
                exit 1
              fi
              
              echo '[GitHub Actions] Waiting for service... ('\$attempt'/30)'
              sleep 2
            done
            
            if [ \$READY -eq 1 ]; then
              echo '[GitHub Actions] ✅ Deployment successful at \$(date)'
              echo '[GitHub Actions] Service PID: '\$NEW_PID
              echo '[GitHub Actions] PID file: '\$PID_FILE
              echo '[GitHub Actions] Log file: '\$LOG_FILE
              echo '[GitHub Actions] No systemd or sudo required!'
            else
              echo '[GitHub Actions] ❌ Service startup timeout'
              echo '[GitHub Actions] Process info:'
              ps aux | grep \"\$NEW_PID\" 2>/dev/null || echo 'Process not found'
              echo '[GitHub Actions] Recent logs:'
              tail -50 \"\$LOG_FILE\" 2>/dev/null || echo 'No logs available'
              exit 1
            fi"
