name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      runSeeds:
        description: 'Run seed scripts after migrations (true/false)'
        required: false
        default: 'false'

permissions:
  contents: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

env:
  DEPLOY_PATH: /opt/eassist-api
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST || '194.163.173.144' }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER || 'gitdeploy' }}
  DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || '22' }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: >-
      ${{ github.ref == 'refs/heads/releases' ||
          (github.event_name == 'release' && github.event.release.target_commitish == 'releases') ||
          (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/releases') }}
    env:
      GIT_SHA: ${{ github.sha }}
      RUN_SEEDS_INPUT: ${{ github.event.inputs.runSeeds || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate environment & secrets
        run: |
          set -euo pipefail
          echo "Ref: $GITHUB_REF"
          if [ -z "${{ secrets.EASSIST_API_SRV }}" ]; then
            echo '::error::Missing required secret: EASSIST_API_SRV' >&2; exit 1; fi
          if [ ! -f package.json ]; then
            echo '::error::package.json not found at repo root' >&2; ls -al; exit 1; fi
          if [ ! -f package-lock.json ]; then
            echo '::error::package-lock.json missing â€“ commit your lockfile for reproducible deploys' >&2; exit 1; fi
          echo 'Environment validation passed.'

      - name: Setup Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Read version
        id: meta
        run: echo "version=$(node -p \"require('./package.json').version\")" >> "$GITHUB_OUTPUT"

      - name: Install rsync
        run: sudo apt-get update -y && sudo apt-get install -y rsync

      - name: Prepare SSH key & known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s' "${{ secrets.EASSIST_API_SRV }}" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          eval "$(ssh-agent -s)" >/dev/null
          ssh-add ~/.ssh/id_deploy
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          else
            ssh-keyscan -p "$DEPLOY_PORT" -H "$DEPLOY_HOST" > ~/.ssh/known_hosts 2>/dev/null || true
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Rsync project to server (exclude node_modules)
        run: |
          set -euo pipefail
          RSYNC_RSH="ssh -p ${DEPLOY_PORT} -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            -e "$RSYNC_RSH" ./ "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PATH}/"

      - name: Remote deploy (migrations, optional seeds, restart)
        env:
          BUILD_LABEL: v${{ steps.meta.outputs.version }}+ci.${{ github.run_number }}
        run: |
          set -euo pipefail
          if [ "${RUN_SEEDS_INPUT}" = "true" ] || [ "${RUN_SEEDS_INPUT}" = "1" ]; then RUN_SEEDS=1; else RUN_SEEDS=0; fi
          ssh -p "$DEPLOY_PORT" -o StrictHostKeyChecking=yes "${DEPLOY_USER}@${DEPLOY_HOST}" \
            "DEPLOY_PATH='${DEPLOY_PATH}' RUN_SEEDS='${RUN_SEEDS}' BUILD_LABEL='${BUILD_LABEL}' GIT_SHA='${GIT_SHA}' bash -s" <<'EOF'
set -euo pipefail
echo "[Remote] Deploy start $(date -u +%Y-%m-%dT%H:%M:%SZ)"
cd "$DEPLOY_PATH" || { echo "[Remote] ERROR: cannot cd to $DEPLOY_PATH" >&2; exit 1; }
if [ ! -f package.json ]; then echo "[Remote] package.json missing" >&2; exit 1; fi
# Ensure production deps once
if [ ! -d node_modules ]; then
  echo "[Remote] Installing production dependencies";
  if command -v npm >/dev/null; then npm ci --only=production || npm install --production; fi
fi
# Permissions prep + migrations
if command -v npm >/dev/null; then
  echo "[Remote] migrate:prep"; npm run migrate:prep 2>/dev/null || true
  echo "[Remote] migrate:run"; npm run migrate:run 2>/dev/null || npm run migrate || echo "[Remote] migrations non-critical"
fi
# Optional seeds
if [ "${RUN_SEEDS}" = "1" ]; then
  echo "[Remote] Seeding";
  npm run seed:permissions-and-superuser 2>/dev/null || true
  npm run seed:initial 2>/dev/null || true
fi
# Restart preference: systemd -> script -> pm2 -> manual
if command -v systemctl >/dev/null && systemctl list-units --type=service | grep -q "eassist-api"; then
  echo "[Remote] systemctl restart eassist-api"; systemctl restart eassist-api || echo "[Remote] systemctl restart failed";
elif [ -x bin/deploy.sh ]; then
  echo "[Remote] bin/deploy.sh restart"; bin/deploy.sh restart || bin/deploy.sh || true;
elif command -v pm2 >/dev/null; then
  echo "[Remote] pm2 reload eassist-api"; pm2 reload eassist-api || pm2 restart eassist-api || true;
else
  echo "[Remote] manual restart"; pkill -f 'node src/server.js' 2>/dev/null || true; (nohup npm start >/dev/null 2>&1 &) || true;
fi
# Smoke test
if command -v curl >/dev/null; then
  echo "[Remote] Health check /health";
  curl -fsS http://localhost:8080/health >/dev/null 2>&1 && echo "[Remote] Health OK" || echo "[Remote] Health NOT responding";
fi
echo "[Remote] Deploy done (BUILD_LABEL=$BUILD_LABEL GIT_SHA=$GIT_SHA)"
EOF

      - name: Summary
        run: |
          {
            echo "Deployment complete";
            echo "Version: ${{ steps.meta.outputs.version }}";
            echo "Commit: $GIT_SHA";
            echo "Seeds: ${RUN_SEEDS_INPUT}";
            echo "Target: ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PORT} -> ${DEPLOY_PATH}";
            echo "Build Label: v${{ steps.meta.outputs.version }}+ci.${{ github.run_number }}";
          } >> "$GITHUB_STEP_SUMMARY"
