name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    name: Build and Deploy eAssist API
    runs-on: ubuntu-latest
    if: >-
      ${{ github.ref == 'refs/heads/releases'
          || (github.event_name == 'release' && github.event.release.target_commitish == 'releases')
          || github.event_name == 'workflow_dispatch' }}
    env:
      DEPLOY_PATH: /opt/eassist-api
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Show Node & npm versions
        run: node -v && npm -v

      - name: Ensure lockfile exists
        run: |
          if [ ! -f package-lock.json ]; then
            echo "::warning::package-lock.json missing. Generating one (consider committing)."
            npm install --package-lock-only
          fi
          grep -m1 'lockfileVersion' package-lock.json || true

      - name: Install dependencies (prefer ci)
        run: |
          set -e
          echo "Installing dependencies with npm ci"
          if ! npm ci; then
            echo "::warning::npm ci failed; falling back to npm install"
            rm -rf node_modules
            npm install
          fi

      - name: Read version
        id: v
        run: echo "version=$(node -e "console.log(require('./package.json').version)")" >> $GITHUB_OUTPUT

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Rsync files
        run: |
          RSYNC_RSH="ssh -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            ./ \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Remote deploy
        env:
          BUILD_LABEL: v${{ steps.v.outputs.version }}+ci.${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=yes \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }} \
            'set -euo pipefail
            echo "[Deploy] Starting deployment at $(date)"
            cd ${{ env.DEPLOY_PATH }}
            
            echo "[Deploy] Installing dependencies"
            npm ci --only=production --no-audit || npm install --only=production --no-audit
            
            echo "[Deploy] Running migrations"
            npm run migrate:run 2>/dev/null || npm run migrate 2>/dev/null || echo "No migrations to run"
            
            echo "[Deploy] Aggressively stopping all Node.js and npm processes"
            # Kill ALL node processes that might be running the API
            sudo pkill -9 -f "node.*server.js" 2>/dev/null || true
            sudo pkill -9 -f "npm.*start" 2>/dev/null || true
            sudo pkill -9 -f "node.*src/server.js" 2>/dev/null || true
            
            echo "[Deploy] Killing any process using port 8080"
            # Multiple methods to ensure port is completely free
            sudo fuser -k -9 8080/tcp 2>/dev/null || true
            sudo lsof -ti:8080 | xargs -r sudo kill -9 2>/dev/null || true
            
            echo "[Deploy] Waiting for processes to fully terminate"
            sleep 3
            
            # Final verification that port is free
            for attempt in 1 2 3; do
              if sudo lsof -ti:8080 >/dev/null 2>&1; then
                echo "[Deploy] Attempt $attempt: Port 8080 still busy, killing remaining processes"
                sudo lsof -ti:8080 | xargs -r sudo kill -9 2>/dev/null || true
                sudo fuser -k -9 8080/tcp 2>/dev/null || true
                sleep 2
              else
                echo "[Deploy] Port 8080 confirmed free"
                break
              fi
              if [ $attempt -eq 3 ]; then
                echo "[Deploy] ERROR: Cannot free port 8080 after 3 attempts"
                sudo lsof -i:8080 || true
                exit 1
              fi
            done
            
            echo "[Deploy] Starting service with nohup"
            # Ensure log directory and file permissions
            sudo mkdir -p /var/log
            sudo touch /var/log/eassist-api.out
            sudo chown $USER /var/log/eassist-api.out 2>/dev/null || true
            
            # Start with explicit environment and immediate background
            cd ${{ env.DEPLOY_PATH }}
            NODE_ENV=production PORT=8080 nohup npm start >/var/log/eassist-api.out 2>&1 &
            START_PID=$!
            echo "[Deploy] Started process with PID: $START_PID"
            
            # Wait for successful startup with timeout
            echo "[Deploy] Waiting for service to bind to port 8080..."
            for i in {1..20}; do
              if sudo lsof -ti:8080 >/dev/null 2>&1; then
                LISTENING_PID=$(sudo lsof -ti:8080 | head -n1)
                echo "[Deploy] ✅ Service successfully listening on port 8080 (PID: $LISTENING_PID)"
                echo "[Deploy] Deployment completed successfully at $(date)"
                # Show final status
                sudo lsof -i:8080 | head -5
                exit 0
              fi
              echo "[Deploy] Waiting for startup ($i/20)..."
              sleep 1
            done
            
            echo "[Deploy] ❌ Service failed to bind to port 8080 within 20 seconds"
            echo "[Deploy] Process status:"
            ps aux | grep -E "(node|npm)" | grep -v grep || echo "No node/npm processes found"
            echo "[Deploy] Recent application logs:"
            tail -50 /var/log/eassist-api.out 2>/dev/null || echo "No logs available"
            echo "[Deploy] Port usage:"
            sudo ss -tulpn | grep :8080 || echo "No process on port 8080"
            exit 1'

      - name: Summary
        run: |
          echo "Deployed version: ${{ steps.v.outputs.version }} commit: $GIT_SHA"
