name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    name: Build and Deploy eAssist API
    runs-on: ubuntu-latest
    if: >-
      ${{ github.ref == 'refs/heads/releases'
          || (github.event_name == 'release' && github.event.release.target_commitish == 'releases')
          || github.event_name == 'workflow_dispatch' }}
    env:
      DEPLOY_PATH: /opt/eassist-api
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Show Node & npm versions
        run: node -v && npm -v

      - name: Ensure lockfile exists
        run: |
          if [ ! -f package-lock.json ]; then
            echo "::warning::package-lock.json missing. Generating one (consider committing)."
            npm install --package-lock-only
          fi
          grep -m1 'lockfileVersion' package-lock.json || true

      - name: Install dependencies (prefer ci)
        run: |
          set -e
          echo "Installing dependencies with npm ci"
          if ! npm ci; then
            echo "::warning::npm ci failed; falling back to npm install"
            rm -rf node_modules
            npm install
          fi

      - name: Read version
        id: v
        run: echo "version=$(node -e "console.log(require('./package.json').version)")" >> $GITHUB_OUTPUT

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Rsync files
        run: |
          RSYNC_RSH="ssh -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            ./ \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Remote deploy
        env:
          BUILD_LABEL: v${{ steps.v.outputs.version }}+ci.${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=yes \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }} \
            'set -euo pipefail
            echo "[Deploy] Starting deployment at $(date)"
            cd ${{ env.DEPLOY_PATH }}
            
            echo "[Deploy] Installing dependencies"
            npm ci --only=production --no-audit || npm install --only=production --no-audit
            
            echo "[Deploy] Running migrations"
            npm run migrate:run 2>/dev/null || npm run migrate 2>/dev/null || echo "No migrations to run"
            
            echo "[Deploy] Stopping all processes on port 8080"
            # Kill any process using port 8080
            sudo fuser -k 8080/tcp 2>/dev/null || true
            sudo lsof -ti:8080 | xargs -r sudo kill -9 2>/dev/null || true
            sleep 2
            
            # Verify port is free
            if sudo lsof -ti:8080 >/dev/null 2>&1; then
              echo "[Deploy] ERROR: Port 8080 still in use"
              sudo lsof -i:8080
              exit 1
            fi
            
            echo "[Deploy] Port 8080 is free, starting service"
            
            # Try systemd first if available
            if command -v systemctl >/dev/null 2>&1 && sudo systemctl list-units --type=service --all | grep -q eassist-api; then
              echo "[Deploy] Starting via systemd"
              sudo systemctl start eassist-api
              sleep 3
              if sudo systemctl is-active eassist-api >/dev/null 2>&1; then
                echo "[Deploy] ✅ Service started successfully via systemd"
                sudo systemctl status eassist-api --no-pager
                exit 0
              else
                echo "[Deploy] Systemd start failed, trying manual start"
                sudo systemctl status eassist-api --no-pager || true
              fi
            fi
            
            # Manual start as fallback
            echo "[Deploy] Starting manually with nohup"
            sudo mkdir -p /var/log
            sudo chown $USER /var/log/eassist-api.out 2>/dev/null || sudo touch /var/log/eassist-api.out
            NODE_ENV=production PORT=8080 nohup npm start >/var/log/eassist-api.out 2>&1 &
            START_PID=$!
            echo "[Deploy] Started with PID: $START_PID"
            
            # Wait for service to start
            for i in {1..15}; do
              if sudo lsof -ti:8080 >/dev/null 2>&1; then
                echo "[Deploy] ✅ Service is listening on port 8080"
                echo "[Deploy] Deployment completed successfully"
                exit 0
              fi
              echo "[Deploy] Waiting for service to start ($i/15)..."
              sleep 1
            done
            
            echo "[Deploy] ❌ Service failed to start"
            echo "[Deploy] Recent logs:"
            tail -50 /var/log/eassist-api.out 2>/dev/null || echo "No logs found"
            exit 1'

      - name: Summary
        run: |
          echo "Deployed version: ${{ steps.v.outputs.version }} commit: $GIT_SHA"
