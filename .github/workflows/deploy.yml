name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy and Restart API
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/releases' }}
    env:
      DEPLOY_PATH: /opt/eassist-api
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST || '194.163.173.144' }}
      DEPLOY_USER: ${{ secrets.DEPLOY_USER || 'gitdeploy' }}
      DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || '22' }}
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate prerequisites
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.EASSIST_API_SRV }}" ]; then
            echo '::error::Missing required secret: EASSIST_API_SRV' >&2; exit 1;
          fi
          echo 'Prerequisites OK.'

      - name: Prepare SSH key & known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.EASSIST_API_SRV }}" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          ssh-keygen -lf ~/.ssh/id_deploy | sed "s/.*/Loaded private key fingerprint: &/"
          ssh-keyscan -p "$DEPLOY_PORT" -H "$DEPLOY_HOST" > ~/.ssh/known_hosts 2>/dev/null || true
          chmod 644 ~/.ssh/known_hosts

      - name: Install rsync
        run: sudo apt-get update -y && sudo apt-get install -y rsync

      - name: Sync project files to server
        run: |
          set -euo pipefail
          RSYNC_RSH="ssh -i ~/.ssh/id_deploy -p ${DEPLOY_PORT} -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            -e "$RSYNC_RSH" ./ "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PATH}/"

      - name: Remote Deployment Script
        id: remote_deploy
        continue-on-error: true
        run: |
          set -euo pipefail
          ssh -i ~/.ssh/id_deploy -p "$DEPLOY_PORT" -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes "${DEPLOY_USER}@${DEPLOY_HOST}" \
            "DEPLOY_PATH='${DEPLOY_PATH}' GIT_SHA='${GIT_SHA}' bash -s" <<'EOF'
          set -euo pipefail
          STATUS_FILE="remote_deploy_status.txt"
          fail() { echo "$1" > "$STATUS_FILE"; echo "::error::$1"; exit 1; }
          log() { echo "[Remote] $1"; }

          log "Starting deployment job"
          cd "$DEPLOY_PATH" || fail "Cannot cd to $DEPLOY_PATH"

          log "Checking for Node.js and npm"
          command -v node >/dev/null || fail "Node.js not found on PATH"
          command -v npm >/dev/null || fail "npm not found on PATH"
          log "Node: $(node -v), npm: $(npm -v)"

          if [ ! -f .env ]; then log "Warning: .env file not found. DB connection may fail."; fi

          log "Installing/updating production dependencies"
          npm ci --only=production --prefer-offline --no-audit || npm install --only=production

          log "Running database migrations"
          npm run migrate:run || npm run migrate || log "Warning: Migration script failed or not found."

          log "Restarting the service"
          RESTARTED=0
          if command -v systemctl >/dev/null && systemctl list-units --type=service | grep -q "eassist-api"; then
            systemctl restart eassist-api && RESTARTED=1 && log "Service restarted via systemd."
          fi
          if [ "$RESTARTED" -eq 0 ] && [ -x bin/deploy.sh ]; then
            ./bin/deploy.sh restart && RESTARTED=1 && log "Service restarted via bin/deploy.sh."
          fi
          if [ "$RESTARTED" -eq 0 ] && command -v pm2 >/dev/null; then
            pm2 reload eassist-api || pm2 restart eassist-api && RESTARTED=1 && log "Service restarted via pm2."
          fi
          if [ "$RESTARTED" -eq 0 ]; then
            log "No systemd/pm2/deploy.sh found, trying npm restart script."
            npm run restart:8080 || fail "All restart methods failed."
          fi

          log "Deployment script finished successfully"
          echo "OK" > "$STATUS_FILE"
          EOF

      - name: Evaluate deployment result
        run: |
          set -euo pipefail
          if [ "${{ steps.remote_deploy.outcome }}" != "success" ]; then
            STATUS_CONTENT=$(ssh -p "$DEPLOY_PORT" -o StrictHostKeyChecking=yes "${DEPLOY_USER}@${DEPLOY_HOST}" "cat '${DEPLOY_PATH}/remote_deploy_status.txt'" || echo "Could not read remote status file.")
            echo "::error::Deployment script failed. Reason: $STATUS_CONTENT"
            exit 1
          fi
          echo "Deployment successful."

      - name: Summary
        run: |
          {
            echo "Deployment successful";
            echo "Commit: $GIT_SHA";
            echo "Target: ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PORT} -> ${DEPLOY_PATH}";
          } >> "$GITHUB_STEP_SUMMARY"
