name: Deploy eAssist API

on:
  push:
    branches: [ "releases" ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    name: Build and Deploy eAssist API
    runs-on: ubuntu-latest
    if: >-
      ${{ (github.ref == 'refs/heads/releases' && github.event_name == 'push')
          || (github.event_name == 'release' && github.event.release.target_commitish == 'releases')
          || github.event_name == 'workflow_dispatch' }}
    env:
      DEPLOY_PATH: /opt/eassist-api
      GIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Show Node & npm versions
        run: node -v && npm -v

      - name: Ensure lockfile exists
        run: |
          if [ ! -f package-lock.json ]; then
            echo "::warning::package-lock.json missing. Generating one (consider committing)."
            npm install --package-lock-only
          fi
          grep -m1 'lockfileVersion' package-lock.json || true

      - name: Install dependencies (prefer ci)
        run: |
          set -e
          echo "Installing dependencies with npm ci"
          if ! npm ci; then
            echo "::warning::npm ci failed; falling back to npm install"
            rm -rf node_modules
            npm install
          fi

      - name: Read version
        id: v
        run: echo "version=$(node -e \"console.log(require('./package.json').version)\")" >> $GITHUB_OUTPUT

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EASSIST_API_SRV }}

      - name: Configure known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          if [ -n "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS || '' }}" ]; then
            echo "${{ secrets.DEPLOY_HOST_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Rsync files
        run: |
          RSYNC_RSH="ssh -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            ./ \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Remote deploy (nohup, no sudo)
        env:
          BUILD_LABEL: v${{ steps.v.outputs.version }}+ci.${{ github.run_number }}
        run: |
          ssh -o StrictHostKeyChecking=yes \
            ${{ secrets.DEPLOY_USER || 'gitdeploy' }}@${{ secrets.DEPLOY_HOST }} \
            'set -euo pipefail
            echo "[Deploy] Starting user-space (nohup) deployment at $(date)"
            cd ${{ env.DEPLOY_PATH }} || { echo "[Deploy] Failed to change to deploy directory"; exit 1; }

            # Provision .env from secret if provided; ensure PORT=8080
            if [ -n "${{ secrets.EASSIST_API_ENV || '' }}" ]; then
              printf "%s\n" "${{ secrets.EASSIST_API_ENV }}" > .env
            fi
            if [ -f .env ]; then
              if grep -q "^PORT=" .env; then
                sed -i.bak "s/^PORT=.*/PORT=8080/" .env && rm -f .env.bak || true
              else
                printf "\nPORT=8080\n" >> .env
              fi
            else
              echo "[Deploy] ERROR: Missing .env and no EASSIST_API_ENV secret provided"; exit 1
            fi

            echo "[Deploy] Installing dependencies on server"
            if ! npm ci --omit=dev --no-audit; then
              echo "[Deploy] npm ci failed, trying npm install"
              npm install --omit=dev --no-audit || { echo "[Deploy] Failed to install dependencies"; exit 1; }
            fi

            echo "[Deploy] Running migrations"
            if npm run migrate:run 2>/dev/null; then
              echo "[Deploy] Migrations (migrate:run) completed"
            elif npm run migrate 2>/dev/null; then
              echo "[Deploy] Migrations (migrate) completed"
            else
              echo "[Deploy] ERROR: Migration failed"; exit 1
            fi

            echo "[Deploy] Restarting via nohup"
            chmod +x ./bin/eassistctl.sh 2>/dev/null || true
            ./bin/eassistctl.sh restart --dir "${{ env.DEPLOY_PATH }}" --port 8080 --nohup || { echo "[Deploy] Restart failed"; exit 1; }

            echo "[Deploy] Verifying port 8080"
            for i in $(seq 1 30); do
              if command -v ss >/dev/null 2>&1; then
                ss -ltn | grep -q ":8080 " && { echo "[Deploy] ✅ Listening on 8080"; exit 0; }
              elif command -v lsof >/dev/null 2>&1; then
                lsof -ti:8080 >/dev/null 2>&1 && { echo "[Deploy] ✅ Listening on 8080"; exit 0; }
              else
                curl -fsS http://localhost:8080/ >/dev/null 2>&1 && { echo "[Deploy] ✅ Responding on 8080"; exit 0; }
              fi
              echo "[Deploy] Waiting for port 8080 to become active... (attempt $i/30)"; sleep 2
            done
            echo "[Deploy] ❌ ERROR: Service not listening on port 8080"; exit 1
            '
